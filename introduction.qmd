---
jupyter: 
  jupytext:
    formats: ipynb,md
    text_representation:
      extension: .md
      format_name: markdown
      format_version: '1.1'
      jupytext_version: 1.10.3
  kernelspec:
    display_name: Python 3
    language: python
    name: book-of-models
  # language_info:
  #   codemirror_mode:
  #     name: ipython
  #     version: 3
  #   file_extension: .py
  #   mimetype: text/x-python
  #   name: Python
  #   nbconvert_exporter: python
  #   pygments_lexer: ipython3
  #   version: 3.8.8
  # nteract:
  #   version: 0.27.0
---

Propsed Outline for Chapter Zero

- **How to use the book**
  - Simple reference
  - Deeper dive
  - Reminder of the basics
  - How to use the code (or not)

- **What to expect in the chapters**
	- Intro/Overview and Context
	- Why it's useful
	- Everyday conceptual examples of use
	- A sense of where the technique lies in the grand scheme of modeling, and how it relates to previous and future content
  - Key Ideas/Concepts
    - Brief summary possible definition list of concepts or terms
  - Demonstration
    - Data Setup
    - Estimation/Model code
    - results/comparisons/visuals/etc.
  - Commentary & where to explore next

- SO LETS GET STARTED!


# Introduction

Whether you consider yourself a data scientist, an analyst, or a statistical hobbyist, you already know that the best part of any project is the modeling. No matter what part of the modeling world you find yourself living, models give us the ability to answer questions, make recommendations, and understand the world around us a little bit better. While we might be understanding the world a little better, do we always understand what our models are doing at a fundamental level? Our goal is to show you how models work -- using both pre-existing functions and functions you create yourself -- and how to interpret the results from those models. We don't want to bore you with formulas, but to show you how those formulas work and how you can implement them yourself. 

Let's look at the following equation for Pearson's correlation coefficient:

$$
r = \frac{\Sigma(x_i-\bar{x})(y_i-\bar{y})}{\sqrt{\Sigma(x_i-\bar{x})^2\Sigma(y_i-\bar{y})^2}}
$$


? If we show a formula in this chapter, let's compare to code and emphasize that we will be using code to show how these formulas work.

You don't need to memorize this formula to interpret the correlation results, but knowing how those individual pieces work together only helps to deepen your understanding of the model. Diving into the internal workings of the models also allows you to see how models connect to each other -- this provides a nice roadmap from chapter to chapter. 

For each model that we cover, you can expect to see the standard formula. Moving beyond that formula, though, we will guide you through what each part of the formula is doing and tie that back to code. When showing you how to use a model, we will do it in two ways:

1. standard functions (e.g., `lm` in R)

2. the complete steps to recreate the formula

We are taking this approach for one reason: so that you can go as deep as you wish. If you are looking for a quick tutorial on helpful models, then you might not find yourself going any deeper than the standard functions. If you want to really dive into these models, then you might find yourself working through the complete steps. Another approach is to allow yourself some time between the standard functions and complete steps. You could work through the standard functions of every chapter, give it some time to sink in, and then work back through the complete steps. While we certainly recommend working through the chapters in order, we want to give you the flexibility to choose your own depth within each.

We hope that this book can serve as a "choose your own adventure" statistical reference. Whether you want a surface-level understanding, a deeper dive, or just want to be able to understand what the analysts in your organization are talking about, this book is for you. While we assume that you have a basic familiarity with coding, that doesn't mean that you need to work through every line of code to understand the fundamental principles of every model.

## Code

You've probably noticed a trend in books, blogs, and courses of choosing R or Python. While practitioners, authors, scholars, and professors alike often choose one over the other, we take a different approach -- both languages are great and it is in your best interest to flip back and forth between the two. Throughout this book, we will be presenting ideas in both R and Python; you can use both or take your pick, but we want to give you both. Our goal isn't to obscure the ideas behind packages and specialty functions, but to show you the most basic functions behind big model ideas. 

When presenting code, we will be specific and tell you which language we are using before we get to the coding. For example, we will use R to load the `ggplot2` package and produce a visualization:

```{r}
library(ggplot2)

ggplot(data = diamonds, 
       mapping = aes(x = carat, y = price)) +
  geom_point(alpha = .5) +
  theme_minimal()
```

Now, we will use Python to import `seaborn` and create a visualization:

```{python}
import plotnine as pn

diamonds = pn.diamonds

pn.ggplot(data=diamonds, 
          mapping=pn.aes(x="carat", y="price")) + \
  pn.geom_point(alpha = .5) + \
  pn.theme_minimal()
```

```{python, fig.width = 6}
import seaborn as sns
import matplotlib.pyplot as plt
sns.set_theme(style="whitegrid")

diamonds = sns.load_dataset("diamonds")

sns.scatterplot(data=diamonds, 
                x="carat", y="price",
                alpha = .5)

plt.show()
```

